# VECTORS

# Creating Vectors
# Most common way to create a Vector is using 'c' [combine]
x = c(1,2,3,4,5,6,7,8,9,10)
x

# Vector Operations
x*3 # multiplies each element by 3
x+2
x-3
x/4
x^2
sqrt(x)

# colon (:)  operation - Sequencing
# Creates sequence of Numbers in either direction!
1:10 #(: - Through)
10:1
-2:3
5:-7

# More on Vector Operations ... Two vectors
# create two vectors of equal length
x = 1:10
y = -5:4
x + y # Add
x-y
x*y
x/y
x^y
# check the length of each vector
length(x)
length(y)
# Unequal length vectors
x+c(1,2) # Shorter vector gets recycled!
x+c (1,2,3)# If Longer vector is not "multiple" of shorter vector, a warning is given!
# Comparison also work on vector!
x <= 5
x<y
# Vector Comparison - "any" and "all"
x = 10:1
y = -4:5
any(x<y)
all(x<y)

# The "nchar" function also acts on each element of vector.
q = c("Hockey","Football","Baseball","Curlin","Rugby","Lacrosse",
      "Basketball","Tennis","Cricket","Soccer")
q
nchar(q)
nchar(y)

?nchar()

# Subscripting:Accessing "individual elements" in vector is done using square brackets []
x[1]
x[1:2]
x[c(1:5,9)]

# Give Names to Vector!
c(One = "a", Two = "y", Last = "r") # Name-Value pair
# You can Name the vector after creating vector as well!
w = 1:3
names(w) = c("a","b","c")
w

# Sometimes data requires more complex storage than simple vectors.
# Data Structures - Apart from Vectors, we have Data Frames, Matrix, List and Array.

# Data Frames(DF) - Most useful features of R & also cited reason for R's ease of use.
# In dataframe, each column is actually a vector, each of which has same length.
# Each column can hold different type of data.
# Also within each column, each element must be of same type, like vectors.

# Creating a Dataframe from vectors

x = 10:1
y = -4:5
q = c("Hockey","Football","Baseball","Curlin","Rugby","Lacrosse",
      "Basketball","Tennis","Cricket","Soccer")
theDF = data.frame(x,y,q) # this would create a 10x3 data.frame with x, y and q as variable names
theDF

# Assigning Names
theDF = data.frame (First=x, Second =y, Sport = q)
theDF

# Checking the dimensions of the DF.
nrow(theDF)
ncol(theDF)
dim(theDF)
names (theDF)
names(theDF)[3]
rownames(theDF)

# Head and Tail
head(theDF)
head(theDF, n=7)
tail(theDF)

class(theDF)

# Accessing Individual Column using $
theDF$Sport # gives the third column named Sport

# Accessing Specific row and column
theDF[3,2] # 3rd row and 2nd Column
theDF[3,2:3] # 3rd Row and column 2 thru 3
theDF[c(3,5), 2]# Row 3&5 from Column 2; 
# since only one column was selected, it was returned as vector and hence no column names in output.

# Rows 3&5 and Columns 2 through 3
theDF[c(3,5), 2:3]

theDF[ ,3] # Access all Rows for column 3
theDF[ , 2:3]

theDF[2,]# Access all columns for Row 2
theDF[2:4,]
theDF[ , c("First", "Sport")]# access using Column Names


# Factor Vectors - Ordinal data [Ordered Categorical]
# Factors are important concept in R, esp. when building models

q2 = c(q,"Hockey","Lacrosse","Hockey","Water Polo","Hockey","Lacrosse")
q2
class(q2)
as.numeric(q2)

class(q2)
# Converting "q2" to factor!
q2_F = as.factor(q2)
q2_F # notice the "Levels" info in the output!
# 11 Levels - 10 Distinct Names from "q" and one (Water polo) from "q2" 
# The "levels" of a factor are the unique values of that factor variable.
# Technically R is giving "unique integer" to each distinct names, See below
as.numeric(q2_F)# IN the O/P --> Notice "6" = "Hockey"

# Ordered Levels and Un-ordered Levels
# Factors can drastically reduce the size of the variable...
# ... because they are storing only unique values!
factor(x=c("High School","College","Masters","Doctrate"),
       levels = c("High School","College","Masters","Doctrate"),
       ordered = TRUE)
       
       
       
# Missing data plays a crucial role in computing and Statistics
# R has two types of missing data - NA and NULL
# while they are similar, but they behave differently and hence needs attention!

# NA - Missing data - Missing Value
z = c(1,2,NA,8,3,NA,3)
z = c(1,2,na,8,3,na,3)
z
# "is.na" tests each element of a vector for missingness
is.na(z)

#Another example
z_char = c("Hockey", NA ,"Cricket")
z_char
is.na(z_char)

# NULL - Absence of anything. It is not exactly missingness, but nothingness
# Eg: Having Brain but thinking Nothing! - Makes Sense!!!
# Functions can sometimes return NULL and their arguments can be NULL.
# Important difference is, NULL is atomical and cannot exist within a vector... 
# ...If used inside a vector, it simply disappears! Let's see...
z= c(1,NULL,3)
z
x = c(1,NA,3)
x 
# Notice, here the "NULL" didnot get stored in "z", infact "z" has only length of 2!
length(z)
length(x)

# Assigning NULL and checking!
d = NULL
is.null(d)

