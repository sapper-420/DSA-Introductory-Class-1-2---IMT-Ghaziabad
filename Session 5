# Basic Statistics - Mean, Variances,Correlations and T-tests

# Generate a random sample of 100 numbers between 1 and 100
x = sample(x=1:100, size = 20, replace = TRUE)
x # the output of "x" is a vector of data

# Simple Arithmetic Mean
mean(x)

# Calculate Mean when Missing Data is found
y = x # copy x to y
y[sample(x=1:100, size = 20, replace = FALSE )] = NA # Null Values
y
y = sample(x=1:100, size = 20, replace = FALSE) 
y

mean(y)# Will give NA!

# Remove missing value(s)and calculate mean
mean(y, na.rm=TRUE) # Now, it will give the mean value

# Weighted Mean
Grades = c(95,72,87,66)
Weights = c(1/2, 1/4, 1/8, 1/8)
mean(Grades)# Simple Arithmetic mean
weighted.mean(x = Grades, w = Weights)# Weighted Mean

#Variance
var(x)
#Calculating Variance using formula!
sum((x-mean(x))^2)/ (length(x)-1)

# Standard Deviation
sqrt(var(x))
sd(x)
sd(y)
sd(y, na.rm=TRUE)

# Other Commonly Used Functions
min(x)
max(x)
median(x)
min(y)
min(y, na.rm=TRUE)

# Summary Statistics
summary(x)
summary(y)

# Quantiles
quantile(x, probs = c(0.25, 0.75)) # Calculate 25th and 75th Quantile
quantile(x, probs = c(0.1,0.25,0.5, 0.75,0.99))

quantile(y, probs = c(0.25, 0.75)) # Calculate 25th and 75th Quantile
quantile(y, probs = c(0.25, 0.75), na.rm = TRUE)

# Correlation and Covariance
install.packages("ggplot2")
library(ggplot2)# require(ggplot2)
head(economics)# Built-in dataset in ggplot2 package
cor(economics$pce, economics$psavert) #pce-Personal Consumption Expenditure;psavert -Personal Savings Rate

# To compare correlation for Multiple variables
cor(economics[, c(2,4:6)])

# Display Correlation in Different Format!

# Lets install the required package and load them onto this R environment for executing!!!

# Load the "reshape" package
install.packages("reshape2")
require(reshape2)
# Also load the Scales package for some extra plotting features
install.packages("scales")
library(scales)

econCor = cor(economics [ , c(2,4:6)])
# use "melt()" to change into long format
?melt() # Help on melt function
econMelt = melt(econCor, varnames = c("x" ,"y"), value.name = "Correlation")
# Order it according to correlation
econMelt = econMelt[order(econMelt$Correlation),]
# Display the melted data
econMelt

# Let's Visualize Correlation
## Plot it with ggplot
# Initialize the plot with x and y on the respective axes
ggplot(econMelt,aes (x=x, y=y),geom_tile(aes(fill = Correlation)),scale_fill_gradient2(low = muted("red"), mid = "white", high = "steelblue",guide = guide_colorbar(ticks=FALSE, barheight=10), limit=c(-1,1), theme_minimal(), labs(x= NULL, y=NULL)))


# Correlation

# Prepare the Data
mydata <- mtcars[, c(1,3,4,5,6,7)]
head(mydata)

# Compute the correlation matrix - cor()
cormat <- round(cor(mydata),2)
head(cormat)

# Create the correlation heatmap with ggplot2
# The package reshape is required to melt the correlation matrix.
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)

#The function geom_tile()[ggplot2 package] is used to visualize the correlation matrix :
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()

#Doesnot Look Great.. Let's Enhance the viz!

#Get the lower and upper triangles of the correlation matrix
## a correlation matrix has redundant information. We'll use the functions below to set half of it to NA.

# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
  cormat[upper.tri(cormat)] <- NA
  return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
  cormat[lower.tri(cormat)]<- NA
  return(cormat)
}

upper_tri <- get_upper_tri(cormat)
upper_tri

#  Finished correlation matrix heatmap
## Melt the correlation data and drop the rows with NA values
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
  geom_tile(color = "white")+
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="Pearson\nCorrelation") +
  theme_minimal()+ 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                   size = 12, hjust = 1))+
  coord_fixed()


# negative correlations are in blue color and positive correlations in red. 
# The function scale_fill_gradient2 is used with the argument limit = c(-1,1) as correlation coefficients range from -1 to 1.
# coord_fixed() : this function ensures that one unit on the x-axis is the same length as one unit on the y-axis.

# Reorder the correlation matrix

# This section describes how to reorder the correlation matrix according to the correlation coefficient. 
# This is useful to identify the hidden pattern in the matrix. 
# hclust for hierarchical clustering order is used in the example below.

reorder_cormat <- function(cormat){
  # Use correlation between variables as distance
  dd <- as.dist((1-cormat)/2)
  hc <- hclust(dd)
  cormat <-cormat[hc$order, hc$order]
}

# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
  geom_tile(color = "white")+
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="Pearson\nCorrelation") +
  theme_minimal()+ # minimal theme
  theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                   size = 12, hjust = 1))+
  coord_fixed()
# Print the heatmap
print(ggheatmap)

#Add correlation coefficients on the heatmap

## Use geom_text() to add the correlation coefficients on the graph
## Use a blank theme (remove axis labels, panel grids and background, and axis ticks)
## Use guides() to change the position of the legend title

ggheatmap + 
  geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    legend.justification = c(1, 0),
    legend.position = c(0.6, 0.7),
    legend.direction = "horizontal")+
  guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
                               title.position = "top", title.hjust = 0.5))



# T-tests
# Dataset: Tips dependents on...
data(tips, package = "reshape2")
head(tips)
str(tips)
write.csv(tips, "C:/Users/sridhar.v/Documents/IMTG DSA-F/5 DSA Basic Statistics - EDA/tips.csv", row.names = FALSE)

# Gender
unique(tips$sex)
#Day of the week
unique(tips$day)

#One Sample t-test - ONE GROUP [Two Tail. Ho:Mean = 2.5]
t.test(tips$tip, alternative = "two.sided", mu=2.5)

#One Sample t-test - Upper Tail. Ho:Mean LE 2.5
t.test(tips$tip, alternative = "greater", mu=2.5)

# Two Sample T-test - TWO GROUP
t.test(tip ~ sex, data = tips, var.equal = TRUE)

#Paired Two-Sample T-Test 
# Dataset: Heights of Father and Son (Package:UsingR)
install.packages("UsingR")
require(UsingR)
head(father.son)
write.csv(father.son, "C:/Users/sridhar.v/Documents/IMTG DSA-F/5 DSA Basic Statistics - EDA/father_son.csv", row.names = FALSE)

#ANOVA  - Comparing Multiple Groups
# Tip by the Day of the Week
str(tips)
tipAnova = aov(tip ~ day, tips)
summary(tipAnova)
